{pragma test}
/* this is C/Ed3-style
	block comment */
//and line comment
(* traditional-style
	comment *)
{ multiline
	pragma test }

program program_type1
	var_external
		variable1 : bool;
	end_var
	var
		s1 : string;
		s2 : wstring;
		s3 : float := 1.1e-3;
		s4 : dword;
		s5 : time;

		s6 : date;
		s7 : LDATE;
		s8 : TIME_OF_DAY;
		s9 : LTIME_OF_DAY;
		s10 : DATE_AND_TIME;
		s11 : LDATE_AND_TIME;
	end_var
	s1 := string#'$thel$'lo';
	s1 := 'hel"lo2$ffab.'; //should highlight only $ff, not ffab
	s2 := "he'llo2";
	s2 := "hel$"lo2$ffff123";
	variable1 := false;
	s3 := float#10;
	s4 := 0001_1010;
	s4 := 16#abcd_ef12_3456_7890 ;
	s4 := 16#FF ;

	s5 := TIME#18ms ;
	s5 := LT#24.8s;
	s5 := t#27h16m;
	s5 := TIME#-19ms;
	s5 := T#11.9m;
	s5 := time#11.9s;
	s5 := t#27h16m;
	s5 := time#5d_10h_17m_19s_4.1ms;
	s5 := t#25h15m+t#1s;

	s6 := DATE#1990-07-19;
	s6 := date#2011-01-30;
	s6 := D#1985-07-09;

	s7 := LDATE#2011-01-30;
	s7 := LD#1990-07-19;

	s8 := TIME_OF_DAY#17:48:45.17;
	s8 := TOD#10:43:47.26;

	s9 := LTOD#22:26:42.38
	s9 := LTIME_OF_DAY#10:26:36.43

	s10 := DATE_AND_TIME#1951-04-29-10:45:39.15102243;
	s10 := DT#1985-05-15-11:30:51.240_001_020;

	s11 := LDATE_AND_TIME#2000-14-19-20:25:51.240_024_101;
	s11 := LDT#1985-05-15-11:30:51.240_001_020;

	s1 := string#'xx$fxx';//TODO wrong escape sequence
end_program

FUNCTION int_to_string : string
	var_input
		in0 : int;
	end_var
	var
		i, n, l : int;
		chars, s, result : string; //TODO declare with length
	end_var
	chars := '0123456789';
	n := in0;
	if n < 0 then // check sign
		n := -n; // make n positive
		result := '-';
	end_if;
	repeat // generate digits in reverse order
		s := concat(
			in1 := s,
			in2 := MID(IN:=chars , L:=int#1, P := 1 + (n mod int#10) ) //1-based indexing!!!
		);
		l := l + 1;
		n := n / 10;
	until n = 0 end_repeat; // delete it
	FOR i := 0 TO l
	DO
		result := concat(
			in1 := result,
			in2 := MID(IN:=s, L:=int#1, P := l - i)
		);
	END_FOR ;
	int_to_string := result;
END_FUNCTION

function_block sensor_filter
	var_input
		in : int ;
	end_var
	var_output
		out : int ;
	end_var
	var
		d : array [0..3] of int ;
		index : int ;
		k : int := 1 ;
	end_var
	d[index] := in ;
	index := index + 1 ;
	if index > 3 then
		index := 0 ;
	end_if ;
	if k < 4 then
		k := k + 1 ;
	end_if ;
	out := ( d[0] + d[1] + d[2] + d[3] ) / k ;
end_function_block

configuration test_config

	var_global //globals
		variable1 : bool := true;
		variable2 : int := 1;
		variable3 : TON ;

		variable4 at %ix1.1 : bool;

	end_var

	task task1 ( interval := T#20.0ms, priority := 100 );


	program program_type1 with task1 : program_1_instance_1;
//TODO program with arguments

	var_access
		variable_access_1 : variable1 : bool;
		variable_access_2 : variable2 : bool read_write;
		variable_access_3 : variable4 : bool read_only;
//TODO located
	end_var

end_configuration

